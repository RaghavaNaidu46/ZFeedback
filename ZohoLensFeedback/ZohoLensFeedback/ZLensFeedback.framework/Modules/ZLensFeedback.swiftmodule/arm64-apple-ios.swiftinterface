// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios15.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-bare-slash-regex -module-name ZLensFeedback
import Combine
import Foundation
import Swift
import SwiftUI
@_exported import ZLensFeedback
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct StaticButtonView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s13ZLensFeedback16StaticButtonViewV4bodyQrvp", 0) __
}
public struct HorizontalSectionView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s13ZLensFeedback21HorizontalSectionViewV4bodyQrvp", 0) __
}
public class GenericListViewModel : Combine.ObservableObject {
  @Combine.Published @_projectedValueProperty($sections) public var sections: [ZLensFeedback.SectionItem] {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $sections: Combine.Published<[ZLensFeedback.SectionItem]>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public init(dataSource: any ZLensFeedback.GenericListDataSource)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public struct SectionItem : Swift.Identifiable, Observation.Observable {
  public let id: Foundation.UUID
  public let title: Swift.String?
  public let items: ZLensFeedback.ListItem
  public let centerAlignHorizontal: Swift.Bool?
  public let canMagnify: Swift.Bool?
  public let canHelight: Swift.Bool?
  public let selectedItem: Swift.Int?
  public let backgroundColor: SwiftUI.Color?
  public let sectionStyle: ZLensFeedback.GenericStyle?
  public var isGrouped: Swift.Bool
  public let action: ((Swift.Int) -> Swift.Void)?
  public let flowAction: ((Swift.Set<Swift.Int>) -> Swift.Void)?
  public let selectedIndex: Swift.Int?
  public let verticalSpacing: CoreFoundation.CGFloat?
  public init(title: Swift.String? = nil, items: ZLensFeedback.ListItem, centerAlignHorizontal: Swift.Bool? = false, canMagnify: Swift.Bool? = false, canHelight: Swift.Bool? = false, selectedItem: Swift.Int? = nil, backgroundColor: SwiftUI.Color? = nil, sectionStyle: ZLensFeedback.GenericStyle? = nil, isGrouped: Swift.Bool = false, selectedIndex: Swift.Int? = nil, verticalSpacing: CoreFoundation.CGFloat? = 10, action: ((Swift.Int) -> Swift.Void)? = nil, flowAction: ((Swift.Set<Swift.Int>) -> Swift.Void)? = nil)
  public typealias ID = Foundation.UUID
}
public struct GenericListView : SwiftUI.View {
  public let sections: [ZLensFeedback.SectionItem]?
  public var stretchableBackground: (Swift.Bool?, Swift.String?)?
  public var scrollViewBackground: SwiftUI.Color?
  public var contentPadding: CoreFoundation.CGFloat
  public var headerMinHeight: CoreFoundation.CGFloat?
  public var cHeight: (CoreFoundation.CGFloat) -> Swift.Void
  public init(sections: [ZLensFeedback.SectionItem]?, scrollViewBackground: SwiftUI.Color? = Color(hex: "#F5F5F5"), stretchableBackground: (Swift.Bool?, Swift.String?)? = (false, nil), contentHeight: SwiftUI.Binding<CoreFoundation.CGFloat?>? = nil, contentPadding: CoreFoundation.CGFloat = .zero, headerMinHeight: CoreFoundation.CGFloat? = 22, returnContentHeight: SwiftUI.Binding<Swift.Bool?>? = nil, cHeight: @escaping (CoreFoundation.CGFloat) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s13ZLensFeedback15GenericListViewV4bodyQrvp", 0) __
}
public struct HeightPreferenceKey : SwiftUI.PreferenceKey {
  public static var defaultValue: CoreFoundation.CGFloat
  public static func reduce(value: inout CoreFoundation.CGFloat, nextValue: () -> CoreFoundation.CGFloat)
  public typealias Value = CoreFoundation.CGFloat
}
public enum ListItem {
  case horizontal([SwiftUI.AnyView])
  case vertical([SwiftUI.AnyView])
  case flow([SwiftUI.AnyView])
  case expandableTextView(ZLensFeedback.ExpandableTextViewModel)
  case staticHView([SwiftUI.AnyView])
  case singleView(SwiftUI.AnyView)
}
extension UIKit.UIScreen {
  @_Concurrency.MainActor(unsafe) public static let screenWidth: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public static let screenHeight: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public static let screenSize: CoreFoundation.CGSize
}
public protocol GenericListViewStyle {
  associatedtype Body : SwiftUI.View
  @SwiftUI.ViewBuilder func body(content: SwiftUI.AnyView) -> Self.Body
}
public struct GenericListViewModifier<Style> : SwiftUI.ViewModifier where Style : ZLensFeedback.GenericListViewStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: ZLensFeedback.GenericListViewModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s13ZLensFeedback23GenericListViewModifierV4body7contentQr7SwiftUI01_eF8_ContentVyACyxGG_tF", 0) __<Style>
}
extension SwiftUI.View {
  public func customListStyle<Style>(_ style: Style) -> some SwiftUI.View where Style : ZLensFeedback.GenericListViewStyle
  
}
public struct FlowLayoutSectionView : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s13ZLensFeedback21FlowLayoutSectionViewV4bodyQrvp", 0) __
}
public protocol GenericListDataSource {
  func fetchSections() -> [ZLensFeedback.SectionItem]
  mutating func addItems(_ items: [ZLensFeedback.SectionItem]) throws -> [ZLensFeedback.SectionItem]
}
public class ExpandableTextViewModel : Combine.ObservableObject {
  public init(text: Swift.String, placeholder: Swift.String, highlightStyle: ZLensFeedback.HighlightStyle, action: ((Swift.String) -> Swift.Void)? = nil)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public struct GenericStyle {
  public let sectionStyle: ZLensFeedback.SectionStyle?
  public let rowStyle: ZLensFeedback.SectionRowStyle?
  public let highlightStyle: ZLensFeedback.HighlightStyle?
  public init(sectionStyle: ZLensFeedback.SectionStyle? = nil, rowStyle: ZLensFeedback.SectionRowStyle? = nil, highlightStyle: ZLensFeedback.HighlightStyle? = nil)
}
public struct SectionStyle {
  public let backgroundColor: SwiftUI.Color?
  public let headerBackgroundColor: SwiftUI.Color?
  public let headerWidth: CoreFoundation.CGFloat?
  public let headerTextAlignment: SwiftUI.TextAlignment?
  public let headerFont: SwiftUI.Font?
  public let headerColor: SwiftUI.Color?
  public let headerPadding: SwiftUI.EdgeInsets?
  public let shadow: CoreFoundation.CGFloat?
  public init(backgroundColor: SwiftUI.Color? = .white, headerBackgroundColor: SwiftUI.Color? = .clear, headerTextAlignment: SwiftUI.TextAlignment? = .leading, headerFont: SwiftUI.Font? = nil, headerColor: SwiftUI.Color? = .gray, headerPadding: SwiftUI.EdgeInsets? = nil, shadow: CoreFoundation.CGFloat? = 0, headerWidth: CoreFoundation.CGFloat? = .zero)
}
public struct SectionRowStyle {
  public let rowBackgroundColor: SwiftUI.Color?
  public let selectedRowBackgroundColor: SwiftUI.Color?
  public let rowTextAlignment: SwiftUI.TextAlignment?
  public let rowFont: SwiftUI.Font?
  public let rowBorderColor: SwiftUI.Color?
  public let selectedRowBorderColor: SwiftUI.Color?
  public let selectedFontColor: SwiftUI.Color?
  public let rowPadding: SwiftUI.EdgeInsets?
  public let rowShadow: CoreFoundation.CGFloat?
  public let rowBorderWidth: CoreFoundation.CGFloat?
  public init(rowBackgroundColor: SwiftUI.Color? = .clear, selectedRowBackgroundColor: SwiftUI.Color? = .clear, rowTextAlignment: SwiftUI.TextAlignment? = .leading, rowFont: SwiftUI.Font? = nil, rowBorderColor: SwiftUI.Color? = .gray, selectedRowBorderColor: SwiftUI.Color? = .clear, selectedFontColor: SwiftUI.Color? = .clear, rowPadding: SwiftUI.EdgeInsets? = nil, rowShadow: CoreFoundation.CGFloat? = 0, rowBorderWidth: CoreFoundation.CGFloat? = 0)
}
public struct HighlightStyle {
  public init(background: SwiftUI.Color? = .clear, border: SwiftUI.Color? = .clear, textColor: SwiftUI.Color? = .black)
}
extension SwiftUI.Color {
  public init(hex: Swift.String, alpha: Swift.Double = 1)
}
public protocol GenericListViewSectionStyle {
  associatedtype Body : SwiftUI.View
  @SwiftUI.ViewBuilder func body(content: SwiftUI.AnyView) -> Self.Body
}
public struct GenericListSectionModifier<Style> : SwiftUI.ViewModifier where Style : ZLensFeedback.GenericListViewSectionStyle {
  @_Concurrency.MainActor(unsafe) public func body(content: ZLensFeedback.GenericListSectionModifier<Style>.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s13ZLensFeedback26GenericListSectionModifierV4body7contentQr7SwiftUI05_ViewF8_ContentVyACyxGG_tF", 0) __<Style>
}
extension SwiftUI.View {
  public func customSectionStyle<Style>(_ style: Style) -> some SwiftUI.View where Style : ZLensFeedback.GenericListViewSectionStyle
  
}
public struct CenteringScrollView<Content> : SwiftUI.View where Content : SwiftUI.View {
  public init(shouldCenter: Swift.Bool, @SwiftUI.ViewBuilder content: () -> Content)
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s13ZLensFeedback19CenteringScrollViewV4bodyQrvp", 0) __<Content>
}
extension SwiftUI.View {
  public func iOSPopover<Content>(isPresented: SwiftUI.Binding<Swift.Bool>, arrowDirection: UIKit.UIPopoverArrowDirection, @SwiftUI.ViewBuilder content: @escaping () -> Content) -> some SwiftUI.View where Content : SwiftUI.View
  
}
